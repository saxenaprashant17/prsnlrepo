<apex:page standardController="Opportunity">
<apex:includeScript value="/soap/ajax/20.0/connection.js" />
<apex:includeScript value="/soap/ajax/10.0/apex.js" />
<script language="javascript">
sforce.Transport = function(url) {
    this.url = url;
    this.connection = null;

    this.newConnection = function() {
        try {
            this.connection = new ActiveXObject('Msxml2.XMLHTTP');
        } catch(e) {
            try {
                this.connection = new ActiveXObject('Microsoft.XMLHTTP');
            } catch(e) {
                this.connection = new XMLHttpRequest();
            }
        }

        return this.connection;
    };

    this.send = function (envelope, callback, async, timeout) {
        this.newConnection();
        if (async) {
            this.connection.onreadystatechange = this.httpConnectionCallback;
        }
        var holder = new sforce.internal.ConnectionHolder(this.connection, callback);
        sforce.internal._connections.push(holder);
        this.connection.open("POST", this.url, async);
        this.connection.setRequestHeader("Content-Type", "text/xml; charset=UTF-8");
        this.connection.setRequestHeader("SOAPAction", "\"\"");
        this.connection.setRequestHeader("Accept", "text/xml");
     //   this.connection.setRequestHeader("User-Agent", "SFAJAX 1.0");
        this.connection.send(envelope);
        if (async && typeof(timeout) !== "undefined") {
            this.setTimeoutOn(holder, timeout);
        }
        if (!async) {
            this.httpConnectionCallback();
        }
    };

    this.setTimeoutOn = function (holder, timeout) {
        function abortConnection() {
            if (holder.connection.readyState !== 4) {
                holder.timedout = true;
                holder.connection.abort();
            }
        }
        setTimeout(abortConnection, timeout);
    };

    this.httpConnectionCallback = function () {

        for (var i = 0; i < sforce.internal._connections.length; i++) {
            var holder = sforce.internal._connections[i];
            if (holder !== null) {
                if (holder.timedout) {
                    sforce.internal._connections[i] = null;
                    sforce.internal._connections.slice(i,1);
                    holder.callback.httpCallback("Remote invocation timed out", false);
                } else  if (holder.connection.readyState == 4) {
                    sforce.internal._connections[i] = null;
                    sforce.internal._connections.slice(i,1);
                    var success = holder.connection.status == 200;
                    if (sforce.debug.trace) {
                        sforce.debug.log("Response : status - " + holder.connection.status);
                        sforce.debug.logXml(holder.connection.responseText);
                    }
                    if (sforce.debug.apexTrace) {
                        sforce.debug.logApex(holder.connection.responseText);
                    }
                    if (holder.connection.responseXML && holder.connection.responseXML.documentElement) {
                        holder.callback.httpCallback(holder.connection.responseXML.documentElement, success);
                    } else {
                        holder.callback.httpCallback("Remote invocation failed, due to: " + holder.connection.responseText +
                                                     " status code: ", holder.connection.status);
                    }
                }
            }
        }
    };
};


function GetShippingInfo(sd, cap, citta, stato) {
    if(sd == '') {
        alert('Data di ricezione desiderata non specificata.');
        return;
    }
    if(cap == ''){
        alert('Manca il CAP di spedizione.');
    	return;
    }

    var ddr = new Date(sd);
    var callback = { 
        onSuccess: function(result){
            var data = JSON.parse(result);
            if(data['err']){
                // Errore
            	alert(data['err']);
            } else {
            	var sd = new Date(data['shippingdate']);
                var opp = new sforce.SObject("Opportunity"); 
                opp.Id = '{!opportunity.Id}'; 
                
                opp.Data_di_spedizione_effettiva__c = sd;
                sforce.connection.update([opp]);
                
                window.top.location.reload(true); 
                log(sd);
                //alert(sd);
            }
        }, 
        onFailure: function(error){ alert("Errore: " + error); } 
    };
    sforce.apex.execute('DHLController', 'getShippingDate', {targetDate: ddr, postalCode:cap, city:citta, country:((stato|'')=='' ? 'IT' : stato) }, callback, false /*isArray*/);


}
</script>
<button onclick="GetShippingInfo('{!opportunity.Data_di_desiderata_ricezione__c}','{!opportunity.CAP_spedizione__c}','{!opportunity.Citt_spedizione__c}','{!opportunity.Stato_spedizione__c}')">Verifica disponibilit√† corriere</button>    
</apex:page>